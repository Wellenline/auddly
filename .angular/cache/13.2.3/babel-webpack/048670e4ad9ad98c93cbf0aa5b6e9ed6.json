{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor(meta) {\n      this.meta = meta;\n      this.theme = localStorage.getItem(\"theme\") || (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\");\n\n      if (this.theme) {\n        document.documentElement.setAttribute(\"data-theme\", this.theme);\n        this.meta.updateTag({\n          name: 'theme-color',\n          content: this.theme === \"dark\" ? \"#000000\" : \"#ffffff\"\n        });\n      }\n    }\n\n    onDark() {\n      const currentTheme = document.documentElement.getAttribute(\"data-theme\");\n      let targetTheme = \"light\";\n\n      if (currentTheme === \"light\") {\n        targetTheme = \"dark\";\n      }\n\n      document.documentElement.setAttribute(\"data-theme\", targetTheme);\n      localStorage.setItem(\"theme\", targetTheme);\n      this.theme = targetTheme;\n      this.meta.updateTag({\n        name: 'theme-color',\n        content: targetTheme === \"dark\" ? \"#000000\" : \"#ffffff\"\n      });\n\n      if (window.nsWebViewBridge) {\n        window.nsWebViewBridge.emit(\"theme\", {\n          color: this.theme === \"dark\" ? \"#1a1a1a\" : \"#ffffff\"\n        });\n      }\n    }\n\n  }\n\n  ThemeService.ɵfac = function ThemeService_Factory(t) {\n    return new (t || ThemeService)(i0.ɵɵinject(i1.Meta));\n  };\n\n  ThemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module"}