{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpEventType } from \"@angular/common/http\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http.service\";\nexport let UploadService = /*#__PURE__*/(() => {\n  class UploadService {\n    constructor(httpService) {\n      this.httpService = httpService;\n      this.$queue = new BehaviorSubject([]);\n      this.$uploading = new BehaviorSubject(false);\n      this.ext = [\".mp3\", \".flac\", \".m4a\"];\n      this.separator = \"/\";\n      this.root = [];\n    }\n\n    consider(payload) {\n      this.separator = payload.separator;\n      this.root = payload.root;\n      return this.httpService.post(`/sync`, {\n        separator: payload.separator,\n        root: payload.root,\n        files: payload.files\n      });\n    }\n\n    upload() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let index = 0;\n        console.log(\"Does it reach this?\");\n        this.$uploading.next(true);\n\n        const sleep = time => {\n          return new Promise(resolve => setTimeout(resolve, time));\n        };\n\n        for (const file of this.$queue.getValue()) {\n          index++;\n\n          if (file.done) {\n            continue;\n          }\n\n          const queue = this.$queue.getValue();\n          queue[index - 1].progress = 0;\n          const formData = new FormData();\n          const parts = file.name.split(this.separator);\n          const name = parts[parts.length - 1];\n          let filePath = file.webkitRelativePath || file.name;\n          const rootPaths = this.root;\n\n          for (const root of rootPaths) {\n            filePath = filePath.replace(root, \"\");\n          }\n\n          const cleanedPath = filePath.replace(/\\\\/g, \"/\");\n          const filePathDir = cleanedPath.split(\"/\");\n          filePathDir.pop();\n          filePathDir.shift();\n          const dir = filePathDir.join(\"/\");\n          formData.append(\"data\", file);\n          formData.append(\"name\", name);\n          formData.append(\"file\", filePath);\n          formData.append(\"dir\", dir);\n          formData.append(\"separator\", this.separator);\n          formData.append(\"root\", JSON.stringify(this.root));\n          yield this.httpService.upload(`/sync/upload`, formData, true).pipe(map(event => {\n            console.log(\"HERE\", event);\n\n            if (event.type === HttpEventType.UploadProgress) {\n              queue[index - 1].progress = Math.round(100 * event.loaded / event.total);\n            }\n          })).toPromise().catch(err => console.log(\"Failed to upload\", err));\n          console.log(`Syncing file ${index}/${this.$queue.getValue().length}`);\n          queue[index - 1].progress = 100;\n          queue[index - 1].done = true;\n          this.$queue.next(queue);\n          yield sleep(1000);\n        }\n\n        this.$queue.next([]);\n        this.$uploading.next(false);\n      });\n    }\n\n  }\n\n  UploadService.ɵfac = function UploadService_Factory(t) {\n    return new (t || UploadService)(i0.ɵɵinject(i1.HttpService));\n  };\n\n  UploadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UploadService,\n    factory: UploadService.ɵfac,\n    providedIn: \"root\"\n  });\n  return UploadService;\n})();","map":null,"metadata":{},"sourceType":"module"}