{"ast":null,"code":"import { IStorageStrategy } from './IStorageStrategy';\nimport { GlobalCacheConfig } from '.';\n/**\n * @deprecated Use {@link LocalStorageStrategy} instead.\n */\n\nexport class DOMStorageStrategy extends IStorageStrategy {\n  constructor() {\n    super();\n    this.masterCacheKey = GlobalCacheConfig.globalCacheKey;\n\n    if (typeof localStorage == 'undefined') {\n      throw new Error('Platform not supported.');\n    }\n  }\n\n  add(cachePair, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (!allCachedData[cacheKey]) {\n      allCachedData[cacheKey] = [];\n    }\n\n    allCachedData[cacheKey].push(cachePair);\n    this.storeRawData(allCachedData);\n  }\n\n  addMany(cachePairs, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (!allCachedData[cacheKey]) {\n      allCachedData[cacheKey] = [];\n    }\n\n    allCachedData[cacheKey] = cachePairs;\n    this.storeRawData(allCachedData);\n  }\n\n  getAll(cacheKey) {\n    return this.getRawData()[cacheKey] || [];\n  }\n\n  removeAtIndex(index, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n      allCachedData[cacheKey].splice(index, 1);\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  remove(index, entity, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n      allCachedData[cacheKey].splice(index, 1);\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  updateAtIndex(index, entity, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey][index]) {\n      allCachedData[cacheKey][index] = entity;\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  update(index, entity, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey][index]) {\n      allCachedData[cacheKey][index] = entity;\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  removeAll(cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n      allCachedData[cacheKey].length = 0;\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  getRawData() {\n    const data = localStorage.getItem(this.masterCacheKey);\n\n    try {\n      return JSON.parse(data) || {};\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  storeRawData(data) {\n    localStorage.setItem(this.masterCacheKey, JSON.stringify(data));\n  }\n\n} //# sourceMappingURL=DOMStorageStrategy.js.map","map":null,"metadata":{},"sourceType":"module"}