{"ast":null,"code":"import { TemplatePortal } from '@angular/cdk/portal';\nimport { merge, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nexport let DropdownTriggerForDirective = /*#__PURE__*/(() => {\n  class DropdownTriggerForDirective {\n    constructor(overlay, elementRef, viewContainerRef) {\n      this.overlay = overlay;\n      this.elementRef = elementRef;\n      this.viewContainerRef = viewContainerRef;\n      this.isDropdownOpen = false;\n      this.dropdownClosingActionsSub = Subscription.EMPTY;\n      this.position = {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n        offsetY: 8,\n        offsetX: 0\n      };\n    }\n\n    toggleDropdown() {\n      this.isDropdownOpen ? this.destroyDropdown() : this.openDropdown();\n    }\n\n    openDropdown() {\n      this.isDropdownOpen = true;\n      this.overlayRef = this.overlay.create({\n        hasBackdrop: true,\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n        scrollStrategy: this.overlay.scrollStrategies.close(),\n        positionStrategy: this.overlay.position().flexibleConnectedTo(this.elementRef).withPositions([this.position])\n      });\n      const templatePortal = new TemplatePortal(this.dropdownPanel.templateRef, this.viewContainerRef);\n      this.overlayRef.attach(templatePortal);\n      this.dropdownClosingActionsSub = this.dropdownClosingActions().subscribe(() => this.destroyDropdown());\n    }\n\n    dropdownClosingActions() {\n      const backdropClick$ = this.overlayRef.backdropClick();\n      const detachment$ = this.overlayRef.detachments();\n      const dropdownClosed = this.dropdownPanel.closed;\n      return merge(backdropClick$, detachment$, dropdownClosed);\n    }\n\n    destroyDropdown() {\n      if (!this.overlayRef || !this.isDropdownOpen) {\n        return;\n      }\n\n      this.dropdownClosingActionsSub.unsubscribe();\n      this.isDropdownOpen = false;\n      this.overlayRef.detach();\n    }\n\n    ngOnDestroy() {\n      if (this.overlayRef) {\n        this.overlayRef.dispose();\n      }\n    }\n\n  }\n\n  DropdownTriggerForDirective.ɵfac = function DropdownTriggerForDirective_Factory(t) {\n    return new (t || DropdownTriggerForDirective)(i0.ɵɵdirectiveInject(i1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n\n  DropdownTriggerForDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DropdownTriggerForDirective,\n    selectors: [[\"\", \"dropdownTriggerFor\", \"\"]],\n    hostBindings: function DropdownTriggerForDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function DropdownTriggerForDirective_click_HostBindingHandler() {\n          return ctx.toggleDropdown();\n        });\n      }\n    },\n    inputs: {\n      dropdownPanel: [\"dropdownTriggerFor\", \"dropdownPanel\"],\n      position: [\"dropdownPosition\", \"position\"]\n    }\n  });\n  return DropdownTriggerForDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}