{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nconst DIR_DOCUMENT = /*#__PURE__*/new InjectionToken('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY\n});\n/** @docs-private */\n\nfunction DIR_DOCUMENT_FACTORY() {\n  return inject(DOCUMENT);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n\n\nlet Directionality = /*#__PURE__*/(() => {\n  class Directionality {\n    constructor(_document) {\n      /** The current 'ltr' or 'rtl' value. */\n      this.value = 'ltr';\n      /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n\n      this.change = new EventEmitter();\n\n      if (_document) {\n        // TODO: handle 'auto' value -\n        // We still need to account for dir=\"auto\".\n        // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n        // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n        const bodyDir = _document.body ? _document.body.dir : null;\n        const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n        const value = bodyDir || htmlDir;\n        this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';\n      }\n    }\n\n    ngOnDestroy() {\n      this.change.complete();\n    }\n\n  }\n\n  Directionality.ɵfac = function Directionality_Factory(t) {\n    return new (t || Directionality)(ɵngcc0.ɵɵinject(DIR_DOCUMENT, 8));\n  };\n\n  Directionality.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function Directionality_Factory() {\n      return new Directionality(i0.ɵɵinject(DIR_DOCUMENT, 8));\n    },\n    token: Directionality,\n    providedIn: \"root\"\n  });\n  return Directionality;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n\n\nlet Dir = /*#__PURE__*/(() => {\n  class Dir {\n    constructor() {\n      /** Normalized direction that accounts for invalid/unsupported values. */\n      this._dir = 'ltr';\n      /** Whether the `value` has been set to its initial value. */\n\n      this._isInitialized = false;\n      /** Event emitted when the direction changes. */\n\n      this.change = new EventEmitter();\n    }\n    /** @docs-private */\n\n\n    get dir() {\n      return this._dir;\n    }\n\n    set dir(value) {\n      const old = this._dir;\n      const normalizedValue = value ? value.toLowerCase() : value;\n      this._rawDir = value;\n      this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';\n\n      if (old !== this._dir && this._isInitialized) {\n        this.change.emit(this._dir);\n      }\n    }\n    /** Current layout direction of the element. */\n\n\n    get value() {\n      return this.dir;\n    }\n    /** Initialize once default value has been set. */\n\n\n    ngAfterContentInit() {\n      this._isInitialized = true;\n    }\n\n    ngOnDestroy() {\n      this.change.complete();\n    }\n\n  }\n\n  Dir.ɵfac = function Dir_Factory(t) {\n    return new (t || Dir)();\n  };\n\n  Dir.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: Dir,\n    selectors: [[\"\", \"dir\", \"\"]],\n    hostVars: 1,\n    hostBindings: function Dir_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"dir\", ctx._rawDir);\n      }\n    },\n    inputs: {\n      dir: \"dir\"\n    },\n    outputs: {\n      change: \"dirChange\"\n    },\n    exportAs: [\"dir\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: Directionality,\n      useExisting: Dir\n    }])]\n  });\n  return Dir;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet BidiModule = /*#__PURE__*/(() => {\n  class BidiModule {}\n\n  BidiModule.ɵfac = function BidiModule_Factory(t) {\n    return new (t || BidiModule)();\n  };\n\n  BidiModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: BidiModule\n  });\n  BidiModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return BidiModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BidiModule, {\n    declarations: [Dir],\n    exports: [Dir]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality, DIR_DOCUMENT_FACTORY as ɵangular_material_src_cdk_bidi_bidi_a }; //# sourceMappingURL=bidi.js.map","map":null,"metadata":{},"sourceType":"module"}