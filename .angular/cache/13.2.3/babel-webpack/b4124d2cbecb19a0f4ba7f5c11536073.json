{"ast":null,"code":"import { ComponentPortal } from '@angular/cdk/portal';\nimport { InjectionToken, Injector } from '@angular/core';\nimport { ModalComponent } from './modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nexport let ModalService = /*#__PURE__*/(() => {\n  class ModalService {\n    constructor(overlay) {\n      this.overlay = overlay;\n    }\n\n    show(config) {\n      const center = this.overlay.position().global().centerVertically().centerHorizontally();\n      const left = this.overlay.position().global().left('0');\n      const right = this.overlay.position().global().right('0');\n      const bottom = this.overlay.position().global().centerHorizontally().bottom();\n      let positionStrategy = center;\n\n      if (config.position === \"left\") {\n        positionStrategy = left;\n      } else if (config.position === \"right\") {\n        positionStrategy = right;\n      } else if (config.position === \"bottom\") {\n        positionStrategy = bottom;\n      }\n\n      let overlayRef = this.overlay.create({\n        hasBackdrop: true,\n        disposeOnNavigation: true,\n        backdropClass: \"modal\",\n        panelClass: \"modal-window\",\n        scrollStrategy: this.overlay.scrollStrategies.block(),\n        positionStrategy // config?.overlayConfig?.positionStrategy || positionStrategy,\n        // scrollStrategy: this.overlay.scrollStrategies.reposition()\n        //scrollStrategy: this.overlay.scrollStrategies.close(),\n        // positionStrategy: this.overlay.position().global()\n        //.centerHorizontally().bottom(),\n\n      });\n      history.pushState(null, \"modalOpened\");\n\n      const destroy = data => {\n        overlayRef.detach();\n        overlayRef.dispose();\n\n        if (config.callback) {\n          config.callback(data);\n        }\n      };\n\n      const inject = Injector.create({\n        providers: [{\n          provide: ModalRef,\n          useValue: overlayRef\n        }, {\n          provide: ModalConfig,\n          useValue: config\n        }]\n      });\n      let portal = new ComponentPortal(ModalComponent, null, inject);\n      overlayRef.attach(portal);\n      overlayRef.backdropClick().subscribe(() => {\n        destroy();\n      });\n      overlayRef.keydownEvents().subscribe(event => {\n        if (event.key === \"Escape\") {\n          destroy();\n        }\n      });\n    }\n\n  }\n\n  ModalService.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)(i0.ɵɵinject(i1.Overlay));\n  };\n\n  ModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac,\n    providedIn: 'root'\n  });\n  return ModalService;\n})();\nexport const ModalRef = new InjectionToken('ModalRef');\nexport const ModalConfig = new InjectionToken('ModalConfig');","map":null,"metadata":{},"sourceType":"module"}