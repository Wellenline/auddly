{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(http) {\n      this.http = http;\n      this.API_ENDPOINT = localStorage.getItem(\"api\"); // environment.api;\n\n      this.API_KEY = localStorage.getItem(\"key\");\n    }\n\n    get(path) {\n      return this.http.get(`${this.API_ENDPOINT}${path}`, {\n        headers: this.headers()\n      }).pipe(catchError(this.handleError), map(res => res));\n    }\n\n    post(path, data) {\n      return this.http.post(`${this.API_ENDPOINT}${path}`, data, {\n        headers: this.headers()\n      }).pipe(catchError(this.handleError), map(res => res));\n    }\n\n    upload(path, data) {\n      return this.http.post(`${this.API_ENDPOINT}${path}`, data, {\n        headers: this.headers()\n      }).pipe(catchError(this.handleError), map(res => res));\n    }\n\n    put(path, data) {\n      return this.http.put(`${this.API_ENDPOINT}${path}`, data, {\n        headers: this.headers()\n      }).pipe(catchError(this.handleError), map(res => res));\n    }\n\n    patch(path, data) {\n      return this.http.patch(`${this.API_ENDPOINT}${path}`, data, {\n        headers: Object.assign(Object.assign({}, this.headers()), {\n          \"Content-Type\": \"multipart/form-data\"\n        })\n      }).pipe(catchError(this.handleError), map(res => res));\n    }\n\n    delete(path, body) {\n      return this.http.delete(`${this.API_ENDPOINT}${path}`, {\n        headers: this.headers()\n      }).pipe(catchError(this.handleError), map(res => res));\n    }\n\n    headers() {\n      const headers = new HttpHeaders(); // headers.set(\"Accept\", \"application/json\");\n      // if (this.API_KEY) {\n\n      headers[\"x-api-key\"] = localStorage.getItem(\"key\"); // }\n\n      return headers;\n    }\n\n    handleError(error) {\n      // alert(JSON.stringify(error, null, 4));\n      if (error.error instanceof ErrorEvent) {\n        console.error(\"An error occurred:\", error.error.message);\n      } else {\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error.message}`);\n        return throwError(error.error.all_errors ? error.error.all_errors.join(\"\\n\") : error.error.message);\n      }\n\n      return throwError(\"Something bad happened; please try again later.\");\n    }\n\n  }\n\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: \"root\"\n  });\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module"}