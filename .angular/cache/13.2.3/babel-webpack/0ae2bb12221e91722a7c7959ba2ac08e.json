{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http.service\";\nimport * as i2 from \"../modules/shared/services/interface.service\";\nexport let PlayerService = /*#__PURE__*/(() => {\n  class PlayerService {\n    constructor(httpService, interfaceService) {\n      this.httpService = httpService;\n      this.interfaceService = interfaceService;\n      this.$queue = new BehaviorSubject(JSON.parse(localStorage.getItem(\"queue\")) || []);\n      this.$track = new BehaviorSubject(JSON.parse(localStorage.getItem(\"track\")) || {});\n      this.$progress = new BehaviorSubject(parseInt(localStorage.getItem(\"progress\"), 10) || 0);\n      this.$buffer = new BehaviorSubject(0);\n      this.$buffering = new BehaviorSubject(false);\n      this.$volume = new BehaviorSubject(parseFloat(localStorage.getItem(\"volume\")) || 100);\n      this.$playing = new BehaviorSubject(false);\n      this.shuffle = localStorage.getItem(\"shuffle\") === \"true\";\n      this.repeat = localStorage.getItem(\"repeat\") === \"true\";\n      this.loop = false;\n      this.audio = new Audio();\n      this.audio.addEventListener(\"timeupdate\", this._onProgress.bind(this));\n      this.audio.addEventListener(\"canplay\", () => {\n        console.log(\"Enough data to start playback\");\n      });\n      this.audio.addEventListener(\"error\", () => {\n        console.log(\"Failed to load audio\");\n      });\n      this.audio.addEventListener(\"loadeddata\", () => {\n        console.log(\"Loaded audio data\");\n\n        if (this.$progress.getValue()) {\n          this.audio.currentTime = this.$progress.getValue() * this.audio.duration / 100;\n        } // this.$buffering.next(this.audio.readyState >= 2);\n\n      });\n      this.audio.addEventListener(\"ended\", this._onAudioEnded.bind(this));\n      this.audio.volume = parseFloat(localStorage.getItem(\"volume\")) || 1;\n\n      if (\"mediaSession\" in navigator) {\n        navigator.mediaSession.setActionHandler(\"play\", this.onPlayback.bind(this));\n        navigator.mediaSession.setActionHandler(\"pause\", this.onPlayback.bind(this));\n        navigator.mediaSession.setActionHandler(\"previoustrack\", this.onPrev.bind(this));\n        navigator.mediaSession.setActionHandler(\"nexttrack\", this.onNext.bind(this));\n        navigator.mediaSession.setActionHandler(\"seekto\", this.onSeek.bind(this));\n      }\n\n      if (this.$track.getValue()._id) {\n        this.setupAudioPlayer(this.$track.getValue(), false);\n      }\n    }\n    /**\n     * Return current track index in the playlist\n     */\n\n\n    get index() {\n      return Math.abs(this.$queue.getValue().findIndex(t => t._id === this.$track.getValue()._id));\n    }\n    /**\n     * Get random track index for shuffle play\n     */\n\n\n    get randomIndex() {\n      return Math.floor(Math.random() * this.$queue.getValue().length) + 0;\n    }\n    /**\n     * Check if track is last in queue\n     */\n\n\n    get isLast() {\n      return this.index + 1 === this.$queue.getValue().length;\n    }\n    /**\n    * Check if track is last in queue\n    */\n\n\n    get isFirst() {\n      return this.index === 0;\n    }\n    /**\n     * Play next track\n     */\n\n\n    onNext() {\n      const index = this.shuffle ? this.randomIndex : this.index + 1;\n\n      if (this.$queue.getValue()[index]) {\n        this.onPlay(this.$queue.getValue()[index]);\n      }\n\n      if (!this.shuffle && this.repeat && this.isLast) {\n        this.onPlay(this.$queue.getValue()[0]);\n      }\n    }\n\n    onRepeat() {\n      this.repeat = !this.repeat;\n      localStorage.setItem(\"repeat\", this.repeat.toString());\n    }\n\n    onShuffle() {\n      this.shuffle = !this.shuffle;\n      localStorage.setItem(\"shuffle\", this.shuffle.toString());\n    }\n\n    onPrev() {\n      const index = this.shuffle ? this.randomIndex : this.index - 1;\n\n      if (this.$queue.getValue()[index]) {\n        this.onPlay(this.$queue.getValue()[index]);\n      }\n    }\n    /**\n     * Add tracks to queue\n     * @param tracks tracks\n     */\n\n\n    queue(tracks) {\n      const queue = this.$queue.getValue().concat(tracks.filter(track => !this.$queue.getValue().map(t => t._id).includes(track._id)));\n      localStorage.setItem(\"queue\", JSON.stringify(queue));\n      this.$queue.next(queue);\n    }\n    /**\n     * Clear localstorage\n     */\n\n\n    clear() {\n      localStorage.setItem(\"queue\", JSON.stringify([]));\n      localStorage.setItem(\"track\", JSON.stringify({}));\n      this.$queue.next([]);\n      this.$track.next({});\n      this.audio.src = undefined;\n      this.$playing.next(false);\n      this.$progress.next(0);\n    }\n    /**\n     * Play track\n     */\n\n\n    onPlay(...tracks) {\n      tracks = tracks.map(track => {\n        return Object.assign(Object.assign({}, track), {\n          source: `${this.httpService.API_ENDPOINT}/tracks/play/${track._id}`\n        });\n      }); // super ugly oneliner\n\n      this.queue(tracks);\n      this.$track.next(tracks[0]);\n      this.$progress.next(0);\n      this.$playing.next(true);\n      this.setupAudioPlayer(tracks[0]);\n      localStorage.setItem(\"track\", JSON.stringify(tracks[0]));\n\n      this._onIncrement(this.$track.getValue());\n    }\n\n    setupAudioPlayer(track, autoPlay = true) {\n      this.audio.src = track.source;\n      this.audio.crossOrigin = \"anonymous\"; // this.audio.load();\n\n      if (autoPlay) {\n        this.audio.play();\n        this.$playing.next(true);\n      }\n\n      if (\"mediaSession\" in navigator) {\n        navigator.mediaSession.setPositionState(null); // @ts-ignore\n\n        navigator.mediaSession.metadata = new MediaMetadata({\n          title: track.name,\n          artist: track.artist,\n          album: track.album.name,\n          artwork: [{\n            src: track.album.picture,\n            sizes: \"96x96\",\n            type: \"image/png\"\n          }, {\n            src: track.album.picture,\n            sizes: \"128x128\",\n            type: \"image/png\"\n          }, {\n            src: track.album.picture,\n            sizes: \"192x192\",\n            type: \"image/png\"\n          }, {\n            src: track.album.picture,\n            sizes: \"256x256\",\n            type: \"image/png\"\n          }, {\n            src: track.album.picture,\n            sizes: \"384x384\",\n            type: \"image/png\"\n          }, {\n            src: track.album.picture,\n            sizes: \"512x512\",\n            type: \"image/png\"\n          }]\n        });\n      }\n    }\n    /**\n     * Toggle audio playback\n     */\n\n\n    onPlayback() {\n      if (!this.audio.paused) {\n        this.audio.pause();\n        this.$playing.next(false);\n      } else {\n        this.audio.play();\n        this.$playing.next(true);\n      }\n    }\n    /**\n     * Seek audio to specific position\n     * @param time number\n     */\n\n\n    onSeek(time) {\n      console.log(time);\n\n      if (typeof time === \"number\") {\n        this.audio.currentTime = time * this.audio.duration;\n      } else {\n        this.audio.currentTime = time.seekTime;\n      }\n    }\n    /**\n     * set audio player volume\n     * TODO save this in localstorage\n     * @param volume number\n     */\n\n\n    onVolume(volume) {\n      this.audio.volume = volume;\n      localStorage.setItem(\"volume\", this.audio.volume.toString());\n      this.$volume.next(volume);\n    }\n\n    onLike(id) {\n      return this.httpService.get(`/tracks/like/${id}`);\n    }\n\n    onAddToPlaylist(track) {\n      console.log(track.playlists);\n      this.httpService.get(`/playlists`).subscribe(response => {\n        this.interfaceService.dialog.show({\n          items: response.playlists.map(playlist => playlist.name),\n          type: \"picker\",\n          title: \"Playlist\",\n          message: \"Choose the playlist you wish to add the track\",\n          closed: index => {\n            if (index !== false && index !== undefined) {\n              const playlist = response.playlists[index];\n\n              if (!track.playlists) {\n                track.playlists = [];\n              }\n\n              if (!track.playlists || track.playlists.findIndex(p => p._id === playlist._id) === -1) {\n                this._addToPlaylist(track, playlist);\n              }\n            }\n          }\n        });\n      });\n    }\n\n    onRemoveFromPlaylist(track) {\n      this.interfaceService.dialog.show({\n        items: track.playlists.map(playlist => playlist.name),\n        type: \"picker\",\n        title: \"Playlist\",\n        message: \"Choose the playlist you wish to remove the track from\",\n        closed: index => {\n          console.log(index);\n\n          if (index !== false && index !== undefined) {\n            const playlist = track.playlists[index];\n\n            this._removeFromPlaylist(track, playlist, index);\n          }\n        }\n      });\n    }\n\n    _addToPlaylist(track, playlist) {\n      this.httpService.post(`/playlists/${playlist._id}`, {\n        track: track._id\n      }).subscribe(response => {\n        this.interfaceService.notify(`${track.name} added to ${playlist.name}`);\n        track.playlists.push(playlist);\n      });\n    }\n\n    _removeFromPlaylist(track, playlist, index) {\n      this.httpService.delete(`/playlists/${playlist._id}/${track._id}`).subscribe(response => {\n        this.interfaceService.notify(`${track.name} removed from ${playlist.name}`);\n\n        if (index > -1) {\n          track.playlists.splice(index, 1);\n        } // this.reload.emit(true);\n\n      });\n    }\n\n    _onProgress() {\n      this.$buffering.next(this.audio.buffered.length === 0);\n\n      if (this.audio.duration > 0) {\n        for (let index = 0; index < this.audio.buffered.length; index++) {\n          if (this.audio.buffered.start(this.audio.buffered.length - 1 - index) < this.audio.currentTime) {\n            this.$buffer.next(this.audio.buffered.end(this.audio.buffered.length - 1 - index) / this.audio.duration * 100);\n            break;\n          }\n        }\n      }\n\n      const progress = this.audio.currentTime / this.audio.duration * 100;\n\n      if (!isNaN(progress)) {\n        this.$progress.next(progress);\n        localStorage.setItem(\"progress\", progress.toString());\n\n        if (\"mediaSession\" in navigator) {\n          navigator.mediaSession.setPositionState({\n            duration: this.audio.duration,\n            position: this.audio.currentTime\n          });\n        }\n      }\n    }\n\n    _onAudioEnded() {\n      this.audio.currentTime = 0;\n      this.$playing.next(false);\n      this.onNext();\n    }\n\n    _onIncrement(track) {\n      this.httpService.put(`/tracks/plays/${track._id}`, {}).subscribe(response => {\n        console.log(\"Saved\");\n      });\n    }\n\n  }\n\n  PlayerService.ɵfac = function PlayerService_Factory(t) {\n    return new (t || PlayerService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.InterfaceService));\n  };\n\n  PlayerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlayerService,\n    factory: PlayerService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PlayerService;\n})();","map":null,"metadata":{},"sourceType":"module"}