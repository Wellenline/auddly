{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from \"@angular/core\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nlet NowPlayingComponent = class NowPlayingComponent {\n  constructor(playerService, location, router) {\n    this.playerService = playerService;\n    this.location = location;\n    this.router = router;\n    this.tracks = [];\n    this.track = {};\n    this.progress = 0;\n    this.volume = (parseFloat(localStorage.getItem(\"volume\")) || 1) * 100;\n    this.playing = false;\n    this.config = {\n      virtual: true,\n      slidesPerView: 1,\n      spaceBetween: 0\n    };\n    this.lyrics = false;\n    this.currentTime = 0;\n    this.buffering = false;\n    this.buffer = 0;\n    this.duration = 0;\n    this.loading = false;\n    this.options = {\n      maxHeight: \"80vh\"\n    };\n    this.destroy = new Subject();\n  }\n\n  ngOnInit() {\n    this.playerService.$playing.pipe(takeUntil(this.destroy)).subscribe(playing => {\n      this.playing = playing;\n    });\n    this.playerService.$buffering.pipe(takeUntil(this.destroy)).subscribe(buffering => {\n      this.buffering = buffering;\n    });\n    this.playerService.$buffer.pipe(takeUntil(this.destroy)).subscribe(buffer => {\n      this.buffer = buffer;\n    });\n    this.playerService.$volume.pipe(takeUntil(this.destroy)).subscribe(volume => {\n      this.volume = volume * 100;\n    });\n    this.playerService.$progress.pipe(takeUntil(this.destroy)).subscribe(num => {\n      this.progress = num;\n      this.currentTime = this.playerService.audio.currentTime;\n    });\n    this.playerService.$queue.pipe(takeUntil(this.destroy)).subscribe(tracks => {\n      this.tracks = tracks;\n\n      if (!this.config.initialSlide) {\n        this.config.initialSlide = this.playerService.index;\n      }\n\n      this.duration = 0;\n      this.tracks.map(track => {\n        if (track.duration) {\n          this.duration += track.duration;\n        }\n      });\n    });\n    this.playerService.$track.pipe(takeUntil(this.destroy)).subscribe(track => {\n      this.track = track;\n\n      if (this.track.progress) {\n        this.progress = this.track.progress;\n      }\n\n      this.lyrics = false;\n\n      if (this.swiper) {\n        this.swiper.setIndex(this.playerService.index);\n      }\n    });\n  }\n\n  onSlideChange(e) {\n    if (e.activeIndex !== this.playerService.index) {\n      this.playerService.onPlay(this.tracks[e.activeIndex]);\n    }\n  }\n\n  onProgress(e) {\n    this.playerService.onSeek(e);\n  }\n\n  onClear() {\n    this.playerService.clear();\n  }\n\n  onClose() {\n    this.location.back(); // this.modal.close();\n  }\n\n  onPlaylist() {\n    this.playerService.onAddToPlaylist(this.track);\n  }\n\n  onVolume(e) {\n    const value = 100 - e * 100;\n    const volume = 1 - value / 100;\n\n    if (volume >= 0 && volume <= 1) {\n      this.playerService.onVolume(volume);\n    }\n\n    this.volume = 100 - value;\n  }\n\n  onLike(e) {\n    this.playerService.onLike(this.track._id).subscribe(() => {\n      this.track.liked = !this.track.liked;\n      /*this.interfaceService.notify(`${this.track.name} ${this.track.liked ? \"added to favourites\" : \"removed from favourites\"}`, {\n          timeout: 3000,\n      });*/\n    });\n  }\n\n  onSwipe(e) {\n    const direction = Math.abs(e.deltaX) > 40 ? e.deltaX > 0 ? 1 : 2 : 0;\n\n    if (direction === 2) {\n      this.playerService.onNext();\n    }\n\n    if (direction === 1) {\n      this.playerService.onPrev();\n    }\n  }\n\n  onQueue() {\n    this.bottomSheet.toggle();\n    this.virtualScroll.scrollToIndex(this.playerService.index);\n  }\n\n  ngOnDestroy() {\n    this.destroy.next();\n  }\n\n};\n\n__decorate([ViewChild(\"swiper\")], NowPlayingComponent.prototype, \"swiper\", void 0);\n\n__decorate([ViewChild(\"bottomSheet\")], NowPlayingComponent.prototype, \"bottomSheet\", void 0);\n\n__decorate([ViewChild(\"scroll\")], NowPlayingComponent.prototype, \"virtualScroll\", void 0);\n\nNowPlayingComponent = __decorate([Component({\n  selector: \"app-now-playing\",\n  templateUrl: \"./now-playing.component.html\",\n  styleUrls: [\"./now-playing.component.scss\"]\n})], NowPlayingComponent);\nexport { NowPlayingComponent };","map":null,"metadata":{},"sourceType":"module"}