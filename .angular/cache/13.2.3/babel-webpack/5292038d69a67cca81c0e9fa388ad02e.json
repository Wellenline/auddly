{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nexport let DragDropDirective = /*#__PURE__*/(() => {\n  class DragDropDirective {\n    constructor() {\n      this.onFileDropped = new EventEmitter();\n      this.background = \"var(--background-color)\";\n      this.opacity = \"1\";\n    } // Dragover listener\n\n\n    onDragOver(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.background = \"var(--background-color-2)\";\n      this.opacity = \"0.8\";\n    } // Dragleave listener\n\n\n    onDragLeave(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.background = \"var(--background-color)\";\n      this.opacity = \"1\";\n    } // Drop listener\n\n\n    ondrop(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.background = \"var(--background-color)\";\n      this.opacity = \"1\";\n      const files = evt.dataTransfer.files; // console.log(evt);\n\n      if (files.length > 0) {\n        this.onFileDropped.emit(files);\n      }\n    }\n\n  }\n\n  DragDropDirective.ɵfac = function DragDropDirective_Factory(t) {\n    return new (t || DragDropDirective)();\n  };\n\n  DragDropDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DragDropDirective,\n    selectors: [[\"\", \"appDragDrop\", \"\"]],\n    hostVars: 4,\n    hostBindings: function DragDropDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragover\", function DragDropDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDragOver($event);\n        })(\"dragleave\", function DragDropDirective_dragleave_HostBindingHandler($event) {\n          return ctx.onDragLeave($event);\n        })(\"drop\", function DragDropDirective_drop_HostBindingHandler($event) {\n          return ctx.ondrop($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"background-color\", ctx.background)(\"opacity\", ctx.opacity);\n      }\n    },\n    outputs: {\n      onFileDropped: \"onFileDropped\"\n    }\n  });\n  return DragDropDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}