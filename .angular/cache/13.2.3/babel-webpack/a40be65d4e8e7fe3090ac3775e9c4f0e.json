{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let RippleDirective = /*#__PURE__*/(() => {\n  class RippleDirective {\n    constructor(renderer, el) {\n      this.renderer = renderer;\n      this.hostEl = el.nativeElement;\n      this.hostEl.classList.add(\"transformer\");\n    }\n\n    onClick(event) {\n      const button = event.currentTarget;\n      const rect = button.getBoundingClientRect();\n      const circle = document.createElement(\"span\");\n      const diameter = Math.max(rect.width, rect.height);\n      const radius = diameter / 2;\n      const x = event.clientX - rect.left - radius;\n      const y = event.clientY - rect.top - radius;\n      let borderRadius;\n\n      if (window.getComputedStyle) {\n        borderRadius = getComputedStyle(this.hostEl).getPropertyValue(\"border-radius\");\n      }\n\n      circle.style.width = circle.style.height = `${diameter}px`;\n      circle.style.left = `${x}px`;\n\n      if (borderRadius) {\n        circle.style.borderRadius = borderRadius;\n      }\n\n      circle.style.top = `${y}px`;\n      circle.classList.add(\"ripple\");\n      const ripple = button.getElementsByClassName(\"ripple\")[0];\n\n      if (ripple) {\n        ripple.remove();\n      }\n\n      const og = {\n        overflow: this.hostEl.style.overflow,\n        position: this.hostEl.style.position\n      };\n      this.hostEl.style.overflow = \"hidden\";\n      this.hostEl.style.position = \"relative\";\n\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = setTimeout(() => {\n        this.hostEl.style.overflow = og.overflow;\n        this.hostEl.style.position = og.position;\n        circle.remove();\n      }, 500);\n      button.appendChild(circle);\n    }\n\n  }\n\n  RippleDirective.ɵfac = function RippleDirective_Factory(t) {\n    return new (t || RippleDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  RippleDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: RippleDirective,\n    selectors: [[\"\", \"appRipple\", \"\"]],\n    hostBindings: function RippleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function RippleDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    }\n  });\n  return RippleDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}