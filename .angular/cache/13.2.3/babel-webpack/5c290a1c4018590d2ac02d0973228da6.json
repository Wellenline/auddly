{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { isPlatformServer } from '@angular/common';\nimport { EventEmitter, ElementRef, NgZone, Inject, PLATFORM_ID, Optional, Input, Output, Directive, NgModule } from '@angular/core';\nimport { Subject, Observable, of, ReplaySubject, never, empty } from 'rxjs';\nimport { filter, tap, take, mergeMap, map, catchError, switchMap, sampleTime, share, startWith } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nconst cssClassNames = {\n  loaded: 'ng-lazyloaded',\n  loading: 'ng-lazyloading',\n  failed: 'ng-failed-lazyloaded'\n};\n\nfunction removeCssClassName(element, cssClassName) {\n  element.className = element.className.replace(cssClassName, '');\n}\n\nfunction addCssClassName(element, cssClassName) {\n  if (!element.className.includes(cssClassName)) {\n    element.className += ` ${cssClassName}`;\n  }\n}\n\nfunction hasCssClassName(element, cssClassName) {\n  return element.className && element.className.includes(cssClassName);\n}\n\nfunction getNavigator() {\n  return typeof window !== 'undefined' ? window.navigator : undefined;\n}\n\nfunction isChildOfPicture(element) {\n  return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');\n}\n\nfunction isImageElement(element) {\n  return element.nodeName.toLowerCase() === 'img';\n}\n\nfunction setImage(element, imagePath, useSrcset) {\n  if (isImageElement(element)) {\n    if (useSrcset && 'srcset' in element) {\n      element.srcset = imagePath;\n    } else {\n      element.src = imagePath;\n    }\n  } else {\n    element.style.backgroundImage = `url('${imagePath}')`;\n  }\n\n  return element;\n}\n\nfunction setSources(attrName) {\n  return image => {\n    const sources = image.parentElement.getElementsByTagName('source');\n\n    for (let i = 0; i < sources.length; i++) {\n      const attrValue = sources[i].getAttribute(attrName);\n\n      if (attrValue) {\n        // Check if `srcset` is supported by the current browser\n        if ('srcset' in sources[i]) {\n          sources[i].srcset = attrValue;\n        } else {\n          sources[i].src = attrValue;\n        }\n      }\n    }\n  };\n}\n\nconst setSourcesToDefault = setSources('defaultImage');\nconst setSourcesToLazy = setSources('lazyLoad');\nconst setSourcesToError = setSources('errorImage');\n\nfunction setImageAndSources(setSourcesFn) {\n  return (element, imagePath, useSrcset) => {\n    if (isImageElement(element) && isChildOfPicture(element)) {\n      setSourcesFn(element);\n    }\n\n    if (imagePath) {\n      setImage(element, imagePath, useSrcset);\n    }\n  };\n}\n\nconst setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);\nconst setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);\nconst setImageAndSourcesToError = setImageAndSources(setSourcesToError);\n\nconst end = ({\n  element\n}) => {\n  addCssClassName(element, cssClassNames.loaded);\n  removeCssClassName(element, cssClassNames.loading);\n};\n\nconst ɵ0 = end;\n\nconst loadImage = ({\n  element,\n  useSrcset,\n  imagePath,\n  decode\n}) => {\n  let img;\n\n  if (isImageElement(element) && isChildOfPicture(element)) {\n    const parentClone = element.parentNode.cloneNode(true);\n    img = parentClone.getElementsByTagName('img')[0];\n    setSourcesToLazy(img);\n    setImage(img, imagePath, useSrcset);\n  } else {\n    img = new Image();\n\n    if (isImageElement(element) && element.sizes) {\n      img.sizes = element.sizes;\n    }\n\n    if (useSrcset && 'srcset' in img) {\n      img.srcset = imagePath;\n    } else {\n      img.src = imagePath;\n    }\n  }\n\n  if (decode && img.decode) {\n    return img.decode().then(() => imagePath);\n  }\n\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(imagePath);\n\n    img.onerror = () => reject(null);\n  });\n};\n\nconst setErrorImage = ({\n  element,\n  errorImagePath,\n  useSrcset\n}) => {\n  setImageAndSourcesToError(element, errorImagePath, useSrcset);\n  addCssClassName(element, cssClassNames.failed);\n};\n\nconst ɵ1 = setErrorImage;\n\nconst setLoadedImage = ({\n  element,\n  imagePath,\n  useSrcset\n}) => {\n  setImageAndSourcesToLazy(element, imagePath, useSrcset);\n};\n\nconst ɵ2 = setLoadedImage;\n\nconst setup = ({\n  element,\n  defaultImagePath,\n  useSrcset\n}) => {\n  setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);\n  addCssClassName(element, cssClassNames.loading);\n\n  if (hasCssClassName(element, cssClassNames.loaded)) {\n    removeCssClassName(element, cssClassNames.loaded);\n  }\n};\n\nconst ɵ3 = setup;\n\nconst isBot = navigator => {\n  if (navigator && navigator.userAgent) {\n    return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\\ link\\ preview|showyoubot|outbrain|pinterest\\/0\\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(navigator.userAgent);\n  }\n\n  return false;\n};\n\nconst sharedPreset = {\n  finally: end,\n  loadImage,\n  setErrorImage,\n  setLoadedImage,\n  setup,\n  isBot\n};\nconst observers = new WeakMap();\nconst intersectionSubject = new Subject();\n\nfunction loadingCallback(entrys) {\n  entrys.forEach(entry => intersectionSubject.next(entry));\n}\n\nconst uniqKey = {};\n\nconst getIntersectionObserver = attributes => {\n  const scrollContainerKey = attributes.scrollContainer || uniqKey;\n  const options = {\n    root: attributes.scrollContainer || null\n  };\n\n  if (attributes.offset) {\n    options.rootMargin = `${attributes.offset}px`;\n  }\n\n  let observer = observers.get(scrollContainerKey);\n\n  if (!observer) {\n    observer = new IntersectionObserver(loadingCallback, options);\n    observers.set(scrollContainerKey, observer);\n  }\n\n  observer.observe(attributes.element);\n  return Observable.create(obs => {\n    const subscription = intersectionSubject.pipe(filter(entry => entry.target === attributes.element)).subscribe(obs);\n    return () => {\n      subscription.unsubscribe();\n      observer.unobserve(attributes.element);\n    };\n  });\n};\n\nconst isVisible = ({\n  event\n}) => {\n  return event.isIntersecting;\n};\n\nconst getObservable = (attributes, _getInterObserver = getIntersectionObserver) => {\n  if (attributes.customObservable) {\n    return attributes.customObservable;\n  }\n\n  return _getInterObserver(attributes);\n};\n\nconst intersectionObserverPreset = Object.assign({}, sharedPreset, {\n  isVisible,\n  getObservable\n});\n\nconst isVisible$1 = () => {\n  return true;\n};\n\nconst ɵ0$1 = isVisible$1;\n\nconst getObservable$1 = () => {\n  return of('load');\n};\n\nconst ɵ1$1 = getObservable$1;\n\nconst loadImage$1 = ({\n  imagePath\n}) => {\n  return [imagePath];\n};\n\nconst ɵ2$1 = loadImage$1;\nconst ssrPreset = Object.assign({}, sharedPreset, {\n  isVisible: isVisible$1,\n  getObservable: getObservable$1,\n  loadImage: loadImage$1\n});\n\nfunction createHooks(platformId, options) {\n  const defaultPreset = intersectionObserverPreset;\n  const isBot = options && options.isBot ? options.isBot : defaultPreset.isBot;\n\n  if (isBot(getNavigator(), platformId)) {\n    return Object.assign(ssrPreset, {\n      isBot\n    });\n  } else if (!options) {\n    return defaultPreset;\n  }\n\n  const hooks = {};\n\n  if (options.preset) {\n    Object.assign(hooks, options.preset);\n  } else {\n    Object.assign(hooks, defaultPreset);\n  }\n\n  Object.keys(options).filter(key => key !== 'preset').forEach(key => {\n    hooks[key] = options[key];\n  });\n  return hooks;\n}\n\nfunction lazyLoadImage(hookSet, attributes) {\n  return evntObservable => {\n    return evntObservable.pipe(tap(data => attributes.onStateChange.emit({\n      reason: 'observer-emit',\n      data\n    })), filter(event => hookSet.isVisible({\n      element: attributes.element,\n      event: event,\n      offset: attributes.offset,\n      scrollContainer: attributes.scrollContainer\n    })), take(1), tap(() => attributes.onStateChange.emit({\n      reason: 'start-loading'\n    })), mergeMap(() => hookSet.loadImage(attributes)), tap(() => attributes.onStateChange.emit({\n      reason: 'mount-image'\n    })), tap(imagePath => hookSet.setLoadedImage({\n      element: attributes.element,\n      imagePath,\n      useSrcset: attributes.useSrcset\n    })), tap(() => attributes.onStateChange.emit({\n      reason: 'loading-succeeded'\n    })), map(() => true), catchError(error => {\n      attributes.onStateChange.emit({\n        reason: 'loading-failed',\n        data: error\n      });\n      hookSet.setErrorImage(attributes);\n      return of(false);\n    }), tap(() => {\n      attributes.onStateChange.emit({\n        reason: 'finally'\n      });\n      hookSet.finally(attributes);\n    }));\n  };\n}\n\nlet LazyLoadImageDirective = /*#__PURE__*/(() => {\n  let LazyLoadImageDirective = class LazyLoadImageDirective {\n    constructor(el, ngZone, platformId, options) {\n      this.onStateChange = new EventEmitter(); // Emits an event on every state change\n\n      this.onLoad = new EventEmitter(); // @deprecated use `onStateChange` instead.\n\n      this.elementRef = el;\n      this.ngZone = ngZone;\n      this.propertyChanges$ = new ReplaySubject();\n      this.platformId = platformId;\n      this.hooks = createHooks(platformId, options);\n    }\n\n    ngOnChanges() {\n      if (this.debug === true && !this.debugSubscription) {\n        this.debugSubscription = this.onStateChange.subscribe(e => console.log(e));\n      }\n\n      this.propertyChanges$.next({\n        element: this.elementRef.nativeElement,\n        imagePath: this.lazyImage,\n        defaultImagePath: this.defaultImage,\n        errorImagePath: this.errorImage,\n        useSrcset: this.useSrcset,\n        offset: this.offset ? this.offset | 0 : 0,\n        scrollContainer: this.scrollTarget,\n        customObservable: this.customObservable,\n        decode: this.decode,\n        onStateChange: this.onStateChange\n      });\n    }\n\n    ngAfterContentInit() {\n      // Don't do anything if SSR and the user isn't a bot\n      if (isPlatformServer(this.platformId) && !this.hooks.isBot(getNavigator(), this.platformId)) {\n        return null;\n      }\n\n      this.ngZone.runOutsideAngular(() => {\n        this.loadSubscription = this.propertyChanges$.pipe(tap(attributes => attributes.onStateChange.emit({\n          reason: 'setup'\n        })), tap(attributes => this.hooks.setup(attributes)), switchMap(attributes => {\n          if (!attributes.imagePath) {\n            return never();\n          }\n\n          return this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes));\n        })).subscribe(success => this.onLoad.emit(success));\n      });\n    }\n\n    ngOnDestroy() {\n      var _a, _b;\n\n      (_a = this.loadSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      (_b = this.debugSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n    }\n\n  };\n\n  LazyLoadImageDirective.ɵfac = function LazyLoadImageDirective_Factory(t) {\n    return new (t || LazyLoadImageDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject('options', 8));\n  };\n\n  LazyLoadImageDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: LazyLoadImageDirective,\n    selectors: [[\"\", \"lazyLoad\", \"\"]],\n    inputs: {\n      lazyImage: [\"lazyLoad\", \"lazyImage\"],\n      defaultImage: \"defaultImage\",\n      errorImage: \"errorImage\",\n      scrollTarget: \"scrollTarget\",\n      customObservable: \"customObservable\",\n      offset: \"offset\",\n      useSrcset: \"useSrcset\",\n      decode: \"decode\",\n      debug: \"debug\"\n    },\n    outputs: {\n      onStateChange: \"onStateChange\",\n      onLoad: \"onLoad\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  __decorate([Input('lazyLoad')], LazyLoadImageDirective.prototype, \"lazyImage\", void 0);\n\n  __decorate([Input()], LazyLoadImageDirective.prototype, \"defaultImage\", void 0);\n\n  __decorate([Input()], LazyLoadImageDirective.prototype, \"errorImage\", void 0);\n\n  __decorate([Input()], LazyLoadImageDirective.prototype, \"scrollTarget\", void 0);\n\n  __decorate([Input()], LazyLoadImageDirective.prototype, \"customObservable\", void 0);\n\n  __decorate([Input()], LazyLoadImageDirective.prototype, \"offset\", void 0);\n\n  __decorate([Input()], LazyLoadImageDirective.prototype, \"useSrcset\", void 0);\n\n  __decorate([Input()], LazyLoadImageDirective.prototype, \"decode\", void 0);\n\n  __decorate([Input()], LazyLoadImageDirective.prototype, \"debug\", void 0);\n\n  __decorate([Output()], LazyLoadImageDirective.prototype, \"onStateChange\", void 0);\n\n  __decorate([Output()], LazyLoadImageDirective.prototype, \"onLoad\", void 0);\n\n  LazyLoadImageDirective = __decorate([__param(2, Inject(PLATFORM_ID)), __param(3, Optional()), __param(3, Inject('options'))], LazyLoadImageDirective);\n  return LazyLoadImageDirective;\n})();\nvar LazyLoadImageModule_1;\nlet LazyLoadImageModule = LazyLoadImageModule_1 = class LazyLoadImageModule {\n  static forRoot(options) {\n    return {\n      ngModule: LazyLoadImageModule_1,\n      providers: [{\n        provide: 'options',\n        useValue: options\n      }]\n    };\n  }\n\n};\n\nLazyLoadImageModule.ɵfac = function LazyLoadImageModule_Factory(t) {\n  return new (t || LazyLoadImageModule)();\n};\n\nLazyLoadImageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: LazyLoadImageModule\n});\nLazyLoadImageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LazyLoadImageModule, {\n    declarations: [LazyLoadImageDirective],\n    exports: [LazyLoadImageDirective]\n  });\n})();\n\nclass Rect {\n  constructor(left, top, right, bottom) {\n    this.left = left;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n  }\n\n  static fromElement(element) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = element.getBoundingClientRect();\n\n    if (left === 0 && top === 0 && right === 0 && bottom === 0) {\n      return Rect.empty;\n    } else {\n      return new Rect(left, top, right, bottom);\n    }\n  }\n\n  static fromWindow(_window) {\n    return new Rect(0, 0, _window.innerWidth, _window.innerHeight);\n  }\n\n  inflate(inflateBy) {\n    this.left -= inflateBy;\n    this.top -= inflateBy;\n    this.right += inflateBy;\n    this.bottom += inflateBy;\n  }\n\n  intersectsWith(rect) {\n    return rect.left < this.right && this.left < rect.right && rect.top < this.bottom && this.top < rect.bottom;\n  }\n\n  getIntersectionWith(rect) {\n    const left = Math.max(this.left, rect.left);\n    const top = Math.max(this.top, rect.top);\n    const right = Math.min(this.right, rect.right);\n    const bottom = Math.min(this.bottom, rect.bottom);\n\n    if (right >= left && bottom >= top) {\n      return new Rect(left, top, right, bottom);\n    } else {\n      return Rect.empty;\n    }\n  }\n\n}\n\nRect.empty = new Rect(0, 0, 0, 0);\nconst scrollListeners = new WeakMap();\n\nfunction sampleObservable(obs, scheduler) {\n  return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));\n} // Only create one scroll listener per target and share the observable.\n// Typical, there will only be one observable per application\n\n\nconst getScrollListener = scrollTarget => {\n  if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {\n    console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');\n    return empty();\n  }\n\n  const scrollListener = scrollListeners.get(scrollTarget);\n\n  if (scrollListener) {\n    return scrollListener;\n  }\n\n  const srollEvent = Observable.create(observer => {\n    const eventName = 'scroll';\n\n    const handler = event => observer.next(event);\n\n    const options = {\n      passive: true,\n      capture: false\n    };\n    scrollTarget.addEventListener(eventName, handler, options);\n    return () => scrollTarget.removeEventListener(eventName, handler, options);\n  });\n  const listener = sampleObservable(srollEvent);\n  scrollListeners.set(scrollTarget, listener);\n  return listener;\n};\n\nconst isVisible$2 = ({\n  element,\n  offset,\n  scrollContainer\n}, getWindow = () => window) => {\n  const elementBounds = Rect.fromElement(element);\n\n  if (elementBounds === Rect.empty) {\n    return false;\n  }\n\n  const windowBounds = Rect.fromWindow(getWindow());\n  elementBounds.inflate(offset);\n\n  if (scrollContainer) {\n    const scrollContainerBounds = Rect.fromElement(scrollContainer);\n    const intersection = scrollContainerBounds.getIntersectionWith(windowBounds);\n    return elementBounds.intersectsWith(intersection);\n  } else {\n    return elementBounds.intersectsWith(windowBounds);\n  }\n};\n\nconst getObservable$2 = attributes => {\n  if (attributes.customObservable) {\n    return attributes.customObservable.pipe(startWith(''));\n  }\n\n  if (attributes.scrollContainer) {\n    return getScrollListener(attributes.scrollContainer);\n  }\n\n  return getScrollListener(window);\n};\n\nconst ɵ0$2 = getObservable$2;\nconst scrollPreset = Object.assign({}, sharedPreset, {\n  isVisible: isVisible$2,\n  getObservable: getObservable$2\n});\nvar LazyLoadImageModule$1 = LazyLoadImageModule;\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LazyLoadImageDirective, LazyLoadImageModule, intersectionObserverPreset, scrollPreset }; //# sourceMappingURL=ng-lazyload-image.js.map","map":null,"metadata":{},"sourceType":"module"}