{"ast":null,"code":"import { fromEvent } from 'rxjs';\nimport { startWith, debounceTime, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/http.service\";\nimport * as i2 from \"src/app/services/player.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../../shared/components/header/header.component\";\nimport * as i5 from \"../../../../shared/directives/ripple.directive\";\nimport * as i6 from \"../../../../shared/directives/dropdown-trigger-for.directive\";\nimport * as i7 from \"../../../../shared/components/dropdown/dropdown.component\";\nimport * as i8 from \"ngx-virtual-scroller\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"../../components/track-item/track-item.component\";\n\nfunction TracksComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-track-item\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const track_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"track\", track_r3);\n  }\n}\n\nexport let TracksComponent = /*#__PURE__*/(() => {\n  class TracksComponent {\n    constructor(httpService, host, playerService, route, router) {\n      this.httpService = httpService;\n      this.host = host;\n      this.playerService = playerService;\n      this.route = route;\n      this.router = router;\n      this.tracks = [];\n      this.pagination = {\n        total: 0,\n        skip: 0,\n        limit: 50\n      };\n      this.genres = [];\n      this.playlists = [];\n      this.loading = true;\n      this.genre = {};\n      this.playlist = {};\n      this.options = {\n        maxHeight: \"80vh\"\n      };\n      this.filter = {\n        sort: \"-created_at\",\n        limit: 50\n      };\n      this.limits = [50, 100, 150, 200, 250, 300, 500, 1000];\n    }\n\n    ngOnInit() {\n      this.hostHeight$ = fromEvent(window, \"resize\").pipe(startWith(this.host.nativeElement.offsetHeight), debounceTime(300), map(() => document.getElementsByClassName(\"app-content\").item(0).offsetHeight));\n      this.route.queryParams.subscribe(params => {\n        if (this.filter !== params) {\n          this.filter = Object.assign({}, params);\n          this.fetchTracks(true);\n        }\n      });\n      this.getGenres();\n      this.getPlaylists();\n    }\n\n    onPlay() {\n      if (this.tracks.length > 0) {\n        this.playerService.onPlay(...this.tracks);\n      }\n    }\n\n    onSort(key) {\n      var _a;\n\n      console.log(this.filter, key);\n      this.filter.sort = ((_a = this.filter.sort) === null || _a === void 0 ? void 0 : _a.includes(key)) ? this.filter.sort.startsWith(\"-\") ? this.filter.sort.replace(\"-\", \"\") : `-${key}` : key;\n      this.router.navigate([\".\"], {\n        relativeTo: this.route,\n        queryParams: {\n          sort: this.filter.sort\n        },\n        queryParamsHandling: \"merge\"\n      });\n    }\n\n    onLiked() {\n      this.router.navigate([\".\"], {\n        relativeTo: this.route,\n        queryParams: {\n          liked: this.filter.liked ? null : true\n        },\n        queryParamsHandling: \"merge\"\n      }); // this.fetchTracks(true);\n    }\n\n    onLimit() {\n      const options = [50, 100, 150, 200, 250, 300, 500, 1000];\n      /*this.interfaceService.dialog.show({\n          items: options,\n          type: \"picker\",\n          title: \"Limit\",\n          message: \"Choose how many tracks would you like to load with a single request\",\n          closed: (index) => {\n              if (index !== false) {\n                  this.router.navigate([\"/tracks\"], {\n                      relativeTo: this.route,\n                      queryParams: {\n                          limit: options[index],\n                      }, queryParamsHandling: \"merge\",\n                  });\n               } else {\n                  this.router.navigate([\"/tracks\"], {\n                      relativeTo: this.route,\n                      queryParams: {\n                          limit: null,\n                      }, queryParamsHandling: \"merge\",\n                  });\n               }\n          },\n      });*/\n    }\n\n    onPlaylist() {\n      /*this.interfaceService.dialog.show({\n          items: this.playlists.map((playlist) => playlist.name),\n          type: \"picker\",\n          title: \"Playlist\",\n          message: \"Choose a playlist to filter\",\n          closed: (index) => {\n              if (index !== false) {\n                  const { _id, name } = this.playlists[index];\n                  this.playlist = {\n                      _id,\n                      name\n                  };\n                  this.router.navigate([\"/tracks\"], {\n                      relativeTo: this.route,\n                      queryParams: {\n                          playlist: _id,\n                      }, queryParamsHandling: \"merge\",\n                  });\n               }\n          },\n      });*/\n    }\n\n    onGenre() {\n      /*this.interfaceService.dialog.show({\n          items: this.genres.map((genre) => genre.name),\n          type: \"picker\",\n          title: \"Genre\",\n          message: \"Choose a genre to filter\",\n          closed: (index) => {\n              if (index !== false) {\n                  const { _id, name } = this.genres[index];\n                  this.genre = {\n                      _id,\n                      name\n                  };\n                  this.router.navigate([\"/tracks\"], {\n                      relativeTo: this.route,\n                      queryParams: {\n                          genre: _id,\n                      }, queryParamsHandling: \"merge\",\n                  });\n               }\n          },\n      });*/\n    }\n\n    onClearGenre() {\n      this.router.navigate([\"/tracks\"], {\n        relativeTo: this.route,\n        queryParams: {\n          genre: null\n        },\n        queryParamsHandling: \"merge\"\n      });\n    }\n\n    onClearPlaylist() {\n      this.router.navigate([\"/tracks\"], {\n        relativeTo: this.route,\n        queryParams: {\n          playlist: null\n        },\n        queryParamsHandling: \"merge\"\n      });\n    }\n\n    getGenres() {\n      this.httpService.get(`/genres`).subscribe(response => {\n        this.genres = response;\n\n        if (this.filter.genre) {\n          this.genre = this.genres.find(genre => genre._id === this.filter.genre);\n        }\n      });\n    }\n\n    getPlaylists() {\n      this.httpService.get(`/playlists`).subscribe(response => {\n        this.playlists = response.playlists;\n        console.log(this.playlists);\n\n        if (this.filter.playlist) {\n          this.playlist = this.playlists.find(playlist => playlist._id === this.filter.playlist);\n        }\n      });\n    }\n\n    onScroll(e) {\n      if (this.tracks.length > 0 && e.endIndex === this.tracks.length - 1) {\n        if (this.tracks.length !== this.pagination.total) {\n          this.pagination.skip += this.pagination.limit;\n          this.fetchTracks();\n        }\n      }\n    }\n\n    fetchTracks(reset = false) {\n      this.loading = true;\n\n      if (reset) {\n        this.tracks = [];\n        this.pagination.total = 0;\n        this.pagination.skip = 0;\n        this.pagination.limit = this.filter.limit ? Number(this.filter.limit) : 50;\n      }\n\n      const query = Object.keys(this.filter).filter(k => k !== \"limit\").map(k => `${encodeURIComponent(k)}=${encodeURIComponent(this.filter[k])}`).join(\"&\");\n      this.httpService.get(`/tracks?skip=${this.pagination.skip}&limit=${this.pagination.limit}&${query}`).subscribe(response => {\n        this.tracks = this.tracks.concat(response.tracks);\n        this.pagination.total = response.total;\n        this.loading = false;\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    trackBy(index, el) {\n      return el._id;\n    }\n\n  }\n\n  TracksComponent.ɵfac = function TracksComponent_Factory(t) {\n    return new (t || TracksComponent)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.PlayerService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  TracksComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TracksComponent,\n    selectors: [[\"app-tracks\"]],\n    decls: 24,\n    vars: 6,\n    consts: [[3, \"sticky\"], [\"header-title\", \"\"], [\"header-actions\", \"\", \"appRipple\", \"\", 1, \"icon\", 3, \"dropdownTriggerFor\"], [1, \"ph-sliders-horizontal\"], [\"dropdown\", \"\"], [1, \"dropdown-item\", 3, \"click\"], [1, \"divider\", \"no-margin\"], [3, \"checkResizeInterval\", \"items\", \"vsEnd\"], [\"scroll\", \"\"], [4, \"ngFor\", \"ngForOf\"], [3, \"track\"]],\n    template: function TracksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-header\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"h3\");\n        i0.ɵɵtext(3, \"Tracks\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelement(5, \"i\", 3);\n        i0.ɵɵelementStart(6, \"app-dropdown\", null, 4);\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵlistener(\"click\", function TracksComponent_Template_div_click_8_listener() {\n          return ctx.onSort(\"name\");\n        });\n        i0.ɵɵtext(9, \"Sort by name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 5);\n        i0.ɵɵlistener(\"click\", function TracksComponent_Template_div_click_10_listener() {\n          return ctx.onSort(\"created_at\");\n        });\n        i0.ɵɵtext(11, \"Sort by date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"div\", 6);\n        i0.ɵɵelementStart(13, \"div\", 5);\n        i0.ɵɵlistener(\"click\", function TracksComponent_Template_div_click_13_listener() {\n          return ctx.onLiked();\n        });\n        i0.ɵɵtext(14, \"Liked\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 5);\n        i0.ɵɵlistener(\"click\", function TracksComponent_Template_div_click_15_listener() {\n          return ctx.onGenre();\n        });\n        i0.ɵɵtext(16, \"Genre\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 5);\n        i0.ɵɵlistener(\"click\", function TracksComponent_Template_div_click_17_listener() {\n          return ctx.onPlaylist();\n        });\n        i0.ɵɵtext(18, \"Playlist\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 5);\n        i0.ɵɵlistener(\"click\", function TracksComponent_Template_div_click_19_listener() {\n          return ctx.onLimit();\n        });\n        i0.ɵɵtext(20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"virtual-scroller\", 7, 8);\n        i0.ɵɵlistener(\"vsEnd\", function TracksComponent_Template_virtual_scroller_vsEnd_21_listener($event) {\n          return ctx.onScroll($event);\n        });\n        i0.ɵɵtemplate(23, TracksComponent_div_23_Template, 2, 1, \"div\", 9);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(7);\n\n        const _r1 = i0.ɵɵreference(22);\n\n        i0.ɵɵproperty(\"sticky\", true);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"dropdownTriggerFor\", _r0);\n        i0.ɵɵadvance(16);\n        i0.ɵɵtextInterpolate(ctx.pagination.limit);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"checkResizeInterval\", 200)(\"items\", ctx.tracks);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", _r1.viewPortItems);\n      }\n    },\n    directives: [i4.HeaderComponent, i5.RippleDirective, i6.DropdownTriggerForDirective, i7.DropdownComponent, i8.VirtualScrollerComponent, i9.NgForOf, i10.TrackItemComponent],\n    styles: [\"[_nghost-%COMP%]{display:block}.icon[_ngcontent-%COMP%]{font-size:2rem;width:40px;height:40px;border-radius:50%;display:grid;place-content:center}.filters[_ngcontent-%COMP%]{background-color:var(--background-color);border-radius:0;display:flex;flex-direction:row;width:100%;height:60px;margin-top:-15px;z-index:1;padding:15px;left:0}.filters[_ngcontent-%COMP%]   .filter[_ngcontent-%COMP%]{margin-bottom:0;margin-top:0;display:flex;align-items:center;border-radius:5px;background-color:var(--background-color-4);color:var(--foreground-color);padding:10px}.filters[_ngcontent-%COMP%]   .filter[_ngcontent-%COMP%]:first-of-type{margin-left:0}.filters[_ngcontent-%COMP%]   .filter[_ngcontent-%COMP%]:last-of-type{margin-right:15px}.filters[_ngcontent-%COMP%]   .filter[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{padding-left:5px}.filters[_ngcontent-%COMP%]   .filter.inactive[_ngcontent-%COMP%]{color:var(--foreground-color)}.filters[_ngcontent-%COMP%]   .filter[_ngcontent-%COMP%]:hover{color:var(--accent-color);cursor:pointer}.filters[_ngcontent-%COMP%]   .filter[_ngcontent-%COMP%] + .filter[_ngcontent-%COMP%]{margin-left:10px}virtual-scroller[_ngcontent-%COMP%]{height:var(--app-height);width:100%;padding-bottom:80px}\"]\n  });\n  return TracksComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}