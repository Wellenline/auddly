@mixin min($bp, $max: "null", $device: "screen") {
    @if $max=="null" {
        @media only #{$device} and (min-width: #{$bp}) {
            @content;
        }
    }

    @else {
        @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
            @content;
        }
    }
}

@function container($container-size, $true-val: false) {
    @return map-get($container-sizes, $container-size);
}

$container-sizes: (xs: map-get($breakpoints, xs) - 20px,

    sm: map-get($breakpoints, sm) - 30px,
    md: map-get($breakpoints, md) - 40px,
    lg: map-get($breakpoints, lg) - 50px,
    xl: map-get($breakpoints, xl) - 400px);

@mixin hidden($bp) {
    .hidden\@#{$bp} {
        display: none !important;
    }
}

.flex {
    display: flex;

    &.wrap {
        flex-wrap: wrap;
    }

    &.middle {
        align-items: center;
    }


    &.center {
        justify-content: center;
    }

    &.right {
        justify-content: flex-end;
    }

    &.left {
        justify-content: flex-start;
    }

    &.top {
        align-items: flex-start;
    }

    &.bottom {
        align-items: flex-end;
    }

    .grow {
        flex-grow: 1;

        &.equal {
            flex-basis: 0;
        }
    }

    .shrink {
        flex-shrink: 1;
    }

}

.relative {
    position: relative;
}

.mx-auto {
    margin: 0 auto;
}



.container {
    padding-right: 1rem;
    padding-left: 1rem;

    &:not(.is-fluid) {
        margin: 0 auto;

        @each $bp,
        $container-size in $container-sizes {
            @include min(#{bp(#{$bp})
        }

        ) {
            width: 100%  !important;
            max-width: container(#{$bp});
        }
    }
}

&.is-fluid {
    padding-left: 40px;
    padding-right: 40px;
    padding-top: 20px;
}

}

@each $bp,
$container-size in $container-sizes {
    .container\@#{$bp} {
        margin: 0 auto;
        padding-right: 1rem;
        padding-left: 1rem;
        width: 100%;

        $i: index($container-sizes, $bp $container-size);

        @for $j from $i through length($container-sizes) {
            @include min(#{bp(nth(nth($container-sizes, $j), 1))}) {
                max-width: container(#{nth(nth($container-sizes, $j), 1)});
            }
        }
    }
}

@for $i from 0 to 5 {

    .p-#{$i* 10} {
        padding: $i * 10px;
    }

    .m-#{$i* 10} {
        margin: $i * 10px;
    }

    .p-#{$i* 10} {
        padding: $i * 10px;
    }

    .p-t-#{$i* 10} {
        padding-top: $i * 10px;
    }

    .p-b-#{$i* 10} {
        padding-bottom: $i * 10px;
    }

    .p-l-#{$i* 10} {
        padding-left: $i * 10px;
    }

    .p-r-#{$i* 10} {
        padding-right: $i * 10px;
    }

    .m-#{$i* 10} {
        margin: $i * 10px;
    }

    .m-t-#{$i* 10} {
        margin-top: $i * 10px;
    }

    .m-b-#{$i* 10} {
        margin-bottom: $i * 10px;
    }

    .m-l-#{$i* 10} {
        margin-left: $i * 10px;
    }

    .m-r-#{$i* 10} {
        margin-right: $i * 10px;
    }

}

.text-left {
    text-align: left;
}

.text-right {
    text-align: right;
}

.text-center {
    text-align: center;
}


// text colors
.text-white {
    color: white;
}

// text colors
.text-black {
    color: black;
}

.text-primary {
    color: $primary;
}

.text-info {
    color: $info;
}

.text-success {
    color: $success;
}

.text-warning {
    color: $warning;
}

.text-danger {
    color: $danger;
}

.text-invert {
    color: $invert;
}

.text-meta {
    color: $text-meta-color;
    font-size: $text-meta-size;
}

.text-lead {
    color: $text-dark;
    font-size: $text-lead-size;
}

@media (min-width: bp(xs)) {
    @include hidden('xs');
}

@media (min-width: bp(sm)) {
    @include hidden('sm');
}

@media (min-width: bp(md)) {
    @include hidden('md');
}

@media (min-width: bp(lg)) {
    @include hidden('lg');
}

@media (min-width: bp(xl)) {
    @include hidden('xl');
}

@media only screen and (max-width: 1000px) {
    .container:not(.is-fluid) {
        width: 100%;
        max-width: calc(100% - 30px);
        padding: 0;
        padding-left: 15px;
        padding-right: 15px;

    }
}

.divider {
    height: 1px;
    background-color: #eee;
    margin-top: 20px;
    margin-bottom: 20px;

    &.no-margin {
        margin: 0;
    }
}